package com.xik.aibookkeeping.server.websocket;

import cn.hutool.core.bean.BeanUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.xik.aibookkeeping.aiagent.client.QianWenAiClient;
import com.xik.aibookkeeping.common.context.AgentContextHolder;
import com.xik.aibookkeeping.common.context.BaseContext;
import com.xik.aibookkeeping.pojo.dto.ChatMessageDTO;
import com.xik.aibookkeeping.pojo.entity.*;
import com.xik.aibookkeeping.server.mapper.AgentMapper;
import com.xik.aibookkeeping.server.mapper.CategoryMapper;
import com.xik.aibookkeeping.server.service.IBillService;
import jakarta.annotation.Resource;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;


@Component
@Slf4j
public class BillWebSocketHandler extends TextWebSocketHandler {

    @Resource
    private QianWenAiClient qianWenAiClient;

    @Resource
    private AgentMapper agentMapper;

    @Resource
    private CategoryMapper categoryMapper;

    @Resource
    private IBillService billService;

    private final Map<Long, WebSocketSession> userSessions = new ConcurrentHashMap<>();
    private final ObjectMapper mapper = new ObjectMapper();

    @Override
    public void afterConnectionEstablished(WebSocketSession session) {
        try {
            Long userId = (Long) session.getAttributes().get("userId");
            if (userId != null) {
                userSessions.put(userId, session);
                log.info("WebSocket 连接建立成功：userId={}", userId);
            } else {
                log.warn("WebSocket连接缺少 userId，关闭连接");
                session.close();
            }
        } catch (Exception e) {
            log.error("WebSocket连接建立失败", e);
        }
    }

    @Override
    public void handleTextMessage(WebSocketSession session, TextMessage message) {
        log.info("收到消息：{}", message.getPayload());
        Long userId = null;
        try {
            userId = (Long) session.getAttributes().get("userId");
            if (userId == null) {
                session.close();
                return;
            }

            // 解析消息
            ChatMessageDTO dto = mapper.readValue(message.getPayload(), ChatMessageDTO.class);
            Long agentId = dto.getAgentId();
            String chatId = userId + "-" + agentId;

            // 设置上下文
            BaseContext.setCurrentId(userId);
            AgentContextHolder.setAgentId(agentId);

            dto.setChatId(chatId);
            dto.setUserId(userId);
            Agent agent = agentMapper.selectById(agentId);
            dto.setPrompt(agent.getPrompt());

            AiBillRecord aiBillRecord = qianWenAiClient.doChatWithBill(dto);
            if (aiBillRecord == null) {
                sendTextMessage(session, "[DONE]");
                return;
            }
            List<BillRecord> billRecordList = aiBillRecord.getBillRecordList();

            if (billRecordList == null || billRecordList.isEmpty()) {
                sendTextMessage(session, "[DONE]");
                return;
            }

            List<BillJson> billList = new ArrayList<>();

            for (BillRecord record : billRecordList) {
                if (record == null) continue;

                Bill bill = new Bill()
                        .setUserId(userId)
                        .setBillTime(LocalDateTime.now())
                        .setAmount(record.getAmount())
                        .setRemark(record.getRemark())
                        .setUuid(record.getUuid())
                        .setIsAutoGenerated(1)
                        .setType(record.getType());

                // 查询分类
                LambdaQueryWrapper<Category> wrapper = new LambdaQueryWrapper<>();
                Long finalUserId = userId;
                wrapper.eq(Category::getIsDeleted, 0)
                        .eq(Category::getCategory, record.getCategory())
                        .and(w -> w.eq(Category::getIsSystem, 1)
                                .or()
                                .eq(Category::getUserId, finalUserId));
                Category category = categoryMapper.selectOne(wrapper);
                if (category != null && category.getId() != null) {
                    bill.setCategoryId(category.getId());
                } else {
                    LambdaQueryWrapper<Category> queryCategory = new LambdaQueryWrapper<>();
                    queryCategory.eq(Category::getIsDeleted, 0)
                            .eq(Category::getType, record.getType())
                            .eq(Category::getStatus, 1)
                            .eq(Category::getCategory, "其他");
                    Category defaultCategory = categoryMapper.selectOne(queryCategory);
                    bill.setCategoryId(defaultCategory != null ? defaultCategory.getId() : null);
                }

                // 保存账单
                Bill savedBill = billService.saveAutoBill(bill);
                BillJson billJson = new BillJson();
                BeanUtil.copyProperties(savedBill, billJson);
                billJson.setBillTime(billJson.getBillTime().replace("T", " "));
                billJson.setCreateTime(billJson.getCreateTime().replace("T", " "));
                billJson.setUpdateTime(billJson.getUpdateTime().replace("T", " "));
                billList.add(billJson);
                // 推送单条账单
                sendTextMessage(session, mapper.writeValueAsString(billList));
            }

            // 所有账单推送完毕
            sendTextMessage(session, "[DONE]");

        } catch (Exception e) {
            log.error("WebSocket处理账单异常，userId={}, error={}", userId, e.getMessage(), e);
            sendTextMessage(session, "出现异常 " + e.getMessage());
        } finally {
            BaseContext.removeCurrentId();
            AgentContextHolder.clear();
        }
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, org.springframework.web.socket.CloseStatus status) {
        Long userId = (Long) session.getAttributes().get("userId");
        if (userId != null) {
            userSessions.remove(userId);
            log.info("WebSocket连接关闭：userId={}, status={}", userId, status);
        }
    }

    /**
     * 工具方法：发送消息到客户端
     */
    private void sendTextMessage(WebSocketSession session, String message) {
        if (session != null && session.isOpen()) {
            try {
                session.sendMessage(new TextMessage(message));
            } catch (IOException e) {
                log.error("发送消息失败：{}", message, e);
            }
        }
    }

    /**
     * 可用于服务端主动向用户推送消息
     */
    public void sendToUser(Long userId, String message) {
        WebSocketSession session = userSessions.get(String.valueOf(userId));
        sendTextMessage(session, message);
    }

}
